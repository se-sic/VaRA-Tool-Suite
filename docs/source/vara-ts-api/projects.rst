Projects
========

A *project* is an abstraction of a software project containing information on
how to build and execute that software project.
The tool suite already ships with some project,
but also also allows yoy to add new projects.

* :ref:`How to add a new project to VaRA-TS`
* :ref:`List of supported projects`


How to add a new project to VaRA-TS
-----------------------------------

To add a new project, create a new class with ``benchbuild.project.Project``
as its superclass and decorate it with the
``benchbuild.utils.download.with_git`` decorator.
Place the class in one ot the ``varats/projects/<group>`` folders, where
``<group>`` refers to the language of the project.

Below, you can see a simplified version of the project *Gravity* with comments
explaining the different parts of the project definition. You can use this as a
template for your own project::

    import typing as tp
    from pathlib import Path

    from benchbuild.project import Project
    from benchbuild.settings import BB_CFG
    # benchbuild.utils.cmd imports work like plumbum.cmd imports
    from benchbuild.utils.cmd import make
    from benchbuild.utils.compiler import cc
    from benchbuild.utils.download import with_git
    from benchbuild.utils.run import run
    from plumbum import local

    from varats.paper.paper_config import project_filter_generator
    from varats.utils.project_util import wrap_paths_to_binaries

    # The ``@with_git`` decorator enables the tool suite to automatically
    # download the project sources from a git repository and gives access to
    # version information.
    @with_git("https://github.com/marcobambini/gravity.git",
              refspec="HEAD",
              shallow_clone=False,
              version_filter=project_filter_generator("gravity"))
    class Gravity(Project):
        """ Programming language Gravity """

        NAME = 'gravity'      # The name of the project
        GROUP = 'c_projects'  # The group this project belongs to
        DOMAIN = 'language'   # The application domain of this project
        VERSION = 'HEAD'      # Version information for this project

        # Used to locate the repository on your disk
        SRC_FILE = f"{NAME}-{VERSION}"

        @property
        def binaries(self) -> tp.List[Path]:
            """ Return a list of binaries generated by the project. """
            return wrap_paths_to_binaries(["gravity"])

        def run_tests(self, runner: run) -> None:
            """ This function defines tests and benchmarks for the project. """
            pass

        def compile(self) -> None:
            """ Contains instructions on how to build the project. """

            # first, download the project sources (provided by @with_git)
            self.download()

            # build the project
            clang = cc(self)
            with local.cwd(self.SRC_FILE):
                with local.env(CC=str(clang)):
                    run(make["-j", int(BB_CFG["jobs"])])


.. note::

    Some projects change their build system at some point in time. In such
    cases, you could check which version you are currently compiling and
    dispatch the build process to a more specific build function.
    For an example, have a look at the real
    :class:`Gravity<varats.projects.c_projects.gravity.Gravity>` project.


Blocking revisions
..................

It will happen that some revisions of a project fail to build because of missing
dependencies or because of a bug in the project sources.
The tool suite provides a facility to mark such revisions and block them from
further experiments.

This can be done with the ``@block_revisions`` decorator.
This decorator allows you to block single revisions or larger ranges of
revisions.

To block revisions, just add the ``@block_revisions` decorator **above** the
``@with_git`` decorator::

    from varats.utils.project_util import (block_revisions,
                                           BlockedRevisionRange, BugAndFixPair)

    @block_revisions([
        BlockedRevisionRange("0b8e0e047fc3d5e18ead3221ad54920f1ad0eedc",
                             "8f417752dd14deea64249b5d32b6138ebc877fa9",
                             "nothing to build"),
        BugAndFixPair("112be515b5ef3b67011c7272e5a50ac3a1fcadc4",
                      "b9a62dfad41ae06d029493cf4d5757de2a0281b2", "bug in gravity")
    ])
    @with_git("https://github.com/marcobambini/gravity.git",
              refspec="HEAD",
              shallow_clone=False,
              version_filter=project_filter_generator("gravity"))
    class Gravity(Project):
        """ Programming language Gravity """
        ...


The decorator takes a list of revision blockers as argument.
There are three different kinds of revision blockers:

- ``BlockedRevision``: blocks a single revision
- ``BlockedRevisionRange``: blocks all revisions that lie between the two
  given revisions ``start`` and ``end``, i.e., all revisions in the output of
  ``git log --pretty=%H --ancestry-path start..end``
- ``BugAndFixPair``: blocks all revisions that contain the given ``bad`` commit
  but not the given ``good`` commit; this tries to also handle cherry-picks or
  similar cases

Each revision blocker has an additional optional argument for tracking the
reason for this block.
This helps not only when reasoning about the validity of experiments, but it
also makes it easier to see whether a block can be fixed in the future
(e.g., missing dependencies could be resolved by a containerized execution
environment).


List of supported projects
--------------------------

C - Projects
............

.. autoclass:: varats.projects.c_projects.busybox.Busybox
.. autoclass:: varats.projects.c_projects.coreutils.Coreutils
.. autoclass:: varats.projects.c_projects.git.Git
.. autoclass:: varats.projects.c_projects.gravity.Gravity
.. autoclass:: varats.projects.c_projects.gzip.Gzip
.. autoclass:: varats.projects.c_projects.libvpx.Libvpx
.. autoclass:: varats.projects.c_projects.lrzip.Lrzip
.. autoclass:: varats.projects.c_projects.openssl.OpenSSL
.. autoclass:: varats.projects.c_projects.opus.Opus
.. autoclass:: varats.projects.c_projects.qemu.Qemu
.. autoclass:: varats.projects.c_projects.tmux.Tmux
.. autoclass:: varats.projects.c_projects.vim.Vim
.. autoclass:: varats.projects.c_projects.x264.X264
.. autoclass:: varats.projects.c_projects.xz.Xz

C++ - Projects
..............

.. autoclass:: varats.projects.cpp_projects.doxygen.Doxygen
