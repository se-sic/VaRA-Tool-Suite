"""Base table module."""

import abc
import typing as tp
from enum import Enum
from pathlib import Path

from pylatex import Document, Package

from varats.paper.case_study import CaseStudy
from varats.table.tables import TableRegistry


class TableFormat(Enum):
    """List of supported TableFormats."""
    value: str

    plain = "plain"
    simple = "simple"
    github = "github"
    grid = "grid"
    fancy_grid = "fancy_grid"
    pipe = "pipe"
    orgtbl = "orgtbl"
    jira = "jira"
    presto = "presto"
    pretty = "pretty"
    psql = "psql"
    rst = "rst"
    mediawiki = "mediawiki"
    moinmoin = "moinmoin"
    youtrack = "youtrack"
    html = "html"
    unsafehtml = "unsafehtml"
    latex = "latex"
    latex_raw = "latex_raw"
    latex_booktabs = "latex_booktabs"
    textile = "textile"


class Table(metaclass=TableRegistry):
    """An abstract base class for all tables generated by VaRA-TS."""

    format_filetypes = {
        TableFormat.github: "md",
        TableFormat.html: "html",
        TableFormat.unsafehtml: "html",
        TableFormat.latex: "tex",
        TableFormat.latex_raw: "tex",
        TableFormat.latex_booktabs: "tex",
        TableFormat.rst: "rst",
    }

    def __init__(self, name: str, **kwargs: tp.Any) -> None:
        self.__name = name
        self.__format = TableFormat.latex_booktabs
        self.__saved_extra_args = kwargs

    @property
    def name(self) -> str:
        """
        Name of the current table.

        Test:
        >>> Table('test').name
        'test'
        """
        return self.__name

    @property
    def format(self) -> TableFormat:
        """
        Current table format as used by python-tabulate.

        Test:
        >>> Table('test').format
        <TableFormat.latex_booktabs: 'latex_booktabs'>
        """
        return self.__format

    @format.setter
    def format(self, new_format: TableFormat) -> None:
        """
        Set current format of the table.

        Args:
            new_format: a table format as used by python-tabulate
        """
        self.__format = new_format

    @property
    def table_kwargs(self) -> tp.Any:
        """
        Access the kwargs passed to the initial table.

        Test:
        >>> tab = Table('test', foo='bar', baz='bazzer')
        >>> tab.table_kwargs['foo']
        'bar'
        >>> tab.table_kwargs['baz']
        'bazzer'
        """
        return self.__saved_extra_args

    @staticmethod
    def supports_stage_separation() -> bool:
        """True, if the table supports stage separation, i.e., the table can be
        drawn separating the different stages in a case study."""
        return False

    @abc.abstractmethod
    def tabulate(self) -> str:
        """Build the table using tabulate."""

    def table_file_name(self, include_filetype: bool = True) -> str:
        """
        Get the file name this table; will be stored to when calling save.

        Args:
            include_filetype: flags whether to include the file extension at the
                end of the filename.

        Returns:
            the file name the table will be stored to

        Test:
        >>> p = Table('test', project='bar')
        >>> p.table_file_name()
        'bar_test.tex'
        >>> p = Table('foo', project='bar', table_case_study=CaseStudy('baz', 42))
        >>> p.format = TableFormat.fancy_grid
        >>> p.table_file_name()
        'baz_42_foo.txt'
        """
        filetype = self.format_filetypes.get(self.__format, "txt")
        table_ident = ''
        if self.table_kwargs.get('table_case_study', None):
            case_study: CaseStudy = self.table_kwargs['table_case_study']
            table_ident = f"{case_study.project_name}_{case_study.version}_"
        elif 'project' in self.table_kwargs:
            table_ident = f"{self.table_kwargs['project']}_"

        sep_stages = ''
        if self.supports_stage_separation(
        ) and self.table_kwargs.get('sep_stages', None):
            sep_stages = 'S'

        if include_filetype:
            return f"{table_ident}{self.name}{sep_stages}.{filetype}"
        return f"{table_ident}{self.name}{sep_stages}"

    def save(
        self,
        path: tp.Optional[Path] = None,
        wrap_document: bool = False
    ) -> None:
        """
        Save the current table to a file.

        Args:
            path: The path where the file is stored (excluding the file name).
            wrap_document: flags whether to wrap the (latex) table code into a
                whole document.
        """
        table = self.tabulate()

        if path is None:
            table_dir = Path(self.table_kwargs["table_dir"])
        else:
            table_dir = path

        if wrap_document and self.__format in [
            TableFormat.latex, TableFormat.latex_raw, TableFormat.latex_booktabs
        ]:
            # landscape mode for bug tables because of long entries
            landscape_mode = "true" if self.__name == "bug_overview" else "false"
            doc = Document(
                default_filepath=f"{table_dir}/{self.table_file_name(False)}",
                documentclass="scrbook",
                document_options="paper=a4",
                geometry_options={
                    "margin": "1.5cm",
                    "landscape": landscape_mode
                }
            )
            wrap_table_in_document(table, doc)
            doc.generate_tex()

        else:
            with open(table_dir / self.table_file_name(), "w") as outfile:
                outfile.write(table)


def wrap_table_in_document(table: str, doc: Document):
    """
    Wraps given table inside a proper latex document. Uses longtable instead of
    tabular to fit data on multiple pages.

    Args:
        table: table string to wrap the document around.
        doc: LateX document to wrap the table in and fill.
    """
    # adjust table to longtable format
    table.replace("\\begin{tabular}", "\\begin{longtable}")
    table.replace("\\end{tabular}", "\\end{longtable}")

    # package for generating longtables
    doc.packages.append(Package('longtable'))
    # package for booktabs automatically generated by pandas.to_latex()
    doc.packages.append(Package('booktabs'))

    doc.change_page_style("empty")

    # embed latex table inside document
    doc.append(table)
