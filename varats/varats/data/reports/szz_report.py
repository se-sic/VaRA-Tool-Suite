"""Module for SZZReport."""
import typing as tp
from pathlib import Path

import yaml

from varats.base.version_header import VersionHeader
from varats.provider.bug.bug import RawBug
from varats.report.report import BaseReport, FileStatusExtension, ReportFilename


class SZZReport(BaseReport, shorthand="SZZ", file_type="yaml"):
    """
    Base class for reports created by several SZZ tools.

    Subclasses of this report only differ in the tool used and the shorthand.
    """

    def __init__(self, path: Path, szz_tool: str):
        super().__init__(path)
        with open(path, 'r') as stream:
            documents = yaml.load_all(stream, Loader=yaml.CLoader)
            version_header = VersionHeader(next(documents))
            version_header.raise_if_not_type("SZZReport")
            version_header.raise_if_version_is_less_than(1)
            raw_report = next(documents)
            if not raw_report["szz_tool"] == szz_tool:
                raise AssertionError(
                    "Report was not created with the correct tool."
                )
            self.__bugs: tp.Dict[str, RawBug] = {}
            for fix, introducers in raw_report["bugs"].items():
                self.__bugs[fix] = RawBug(fix, set(introducers), None)

    @classmethod
    def shorthand(cls) -> str:
        """Shorthand for this report."""
        return cls.SHORTHAND

    def get_all_raw_bugs(self) -> tp.FrozenSet[RawBug]:
        """
        Get the set of all bugs in this report.

        Returns:
            A set of `RawBug` s.
        """
        return frozenset(self.__bugs.values())

    def get_raw_bug_by_fix(self, fixing_commit: str) -> tp.Optional[RawBug]:
        """
        Get a bug by the id of the fixing commit.

        Returns:
            A `RawBug` if avilable, else `None`.
        """
        return self.__bugs.get(fixing_commit, None)


class SZZUnleashedReport(SZZReport, shorthand="SZZU", file_type="yaml"):
    """
    SZZReport as generated by the.

    :class:`~varats.experiments.szz.szz_unleashed.SZZUnleashedExperiment`.
    """

    SHORTHAND = "SZZU"

    def __init__(self, path: Path):
        super().__init__(path, "SZZUnleashed")


class PyDrillerSZZReport(SZZReport, shorthand="PySZZ", file_type="yaml"):
    """
    SZZReport as generated by the.

    :class:`~varats.experiments.szz.pydriller_szz.PyDrillerSZZExperiment`.
    """

    SHORTHAND = "PySZZ"

    def __init__(self, path: Path):
        super().__init__(path, "PyDrillerSZZ")
