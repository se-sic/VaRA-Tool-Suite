"""Project file for TwoLibsOneProjectInteractionDiscreteLibsSingleProject."""
import typing as tp

import benchbuild as bb
from benchbuild.utils.cmd import cmake, make
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.paper.paper_config import project_filter_generator
from varats.settings import bb_cfg
from varats.utils.project_util import (
    ProjectBinaryWrapper,
    get_all_revisions_between,
    wrap_paths_to_binaries,
    get_local_project_git_path,
)


class TwoLibsOneProjectInteractionDiscreteLibsSingleProject(
    bb.Project
):  # type: ignore
    """Class to analyse interactions between two discrete libraries and one
    project."""

    NAME = 'TwoLibsOneProjectInteraction_DiscreteLibs_SingleProject'
    GROUP = 'cpp_projects'
    DOMAIN = 'analysis'

    SOURCE = [
        bb.source.Git(
            remote="https://github.com/se-passau/vara-test-repos",
            local="TwoLibsOneProjectInteraction_DiscreteLibs_SingleProject",
            refspec="HEAD",
            limit=None,
            shallow=False,
            version_filter=project_filter_generator(
                "TwoLibsOneProjectInteraction_DiscreteLibs_SingleProject"
            )
        )
    ]

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        return wrap_paths_to_binaries(["elementalist"])

    def run_tests(self) -> None:
        pass

    def compile(self) -> None:
        """Contains instructions on how to build the project."""

        git_path = get_local_project_git_path(self.NAME)
        version = self.version_of_primary

        # cmake as build system
        with local.cwd(git_path):
            cmake_revisions = get_all_revisions_between(
                "cc6a93677f9a9825d3bbe20f1201e6652ba4a7d", "master"
            )

        if version in cmake_revisions:
            self.__compile_cmake()
        else:
            self.__compile_make()

    def __compile_cmake(self) -> None:
        version_source = bb.path(self.source_of_primary)
        clang = bb.compiler.cc(self)
        with local.cwd(version_source):
            with local.env(CC=str(clang)):
                bb.watch(cmake)("-G", "Unix Makefiles", ".")
            bb.watch(make)("-j", get_number_of_jobs(bb_cfg()))

    def __compile_make(self) -> None:
        version_source = bb.path(self.source_of_primary)
        clang = bb.compiler.cc(self)
        with local.cwd(version_source):
            with local.env(CC=str(clang)):
                bb.watch(make)("-j", get_number_of_jobs(bb_cfg()))
