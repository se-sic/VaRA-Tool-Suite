"""
Data wrappers for commit reports generated by VaRA
"""

import yaml
import pandas as pd

from PyQt5.QtWidgets import QWidget, QGridLayout


class FunctionInfo(object):

    def __init__(self, raw_yaml):
        self.name = raw_yaml['function-name']
        self.id = raw_yaml['id']
        self.region_id = raw_yaml['region-id']

    def __str__(self):
        return "{} ({}): {}".format(self.name, self.id, self.region_id)


class RegionMapping(object):

    def __init__(self, raw_yaml):
        self.id = raw_yaml['id']
        self.representation = raw_yaml['hash']

    def __str__(self):
        return "{} = {}".format(self.id, self.representation)


class RegionToFunctionEdge(object):

    def __init__(self, raw_yaml):
        self._from = raw_yaml['from-region']
        self._to = raw_yaml['to-functions']

    def __str__(self):
        return "{} -> {}".format(self._from, self._to)


class RegionToRegionEdge(object):

    def __init__(self, raw_yaml):
        self._from = raw_yaml['from']
        self._to = raw_yaml['to']

    def __str__(self):
        return "{} -> {}".format(self._from, self._to)

    @property
    def edge_from(self):
        return self._from

    @property
    def edge_to(self):
        return self._to


class FunctionGraphEdges(object):

    def __init__(self, raw_yaml):
        self.fname = raw_yaml['function-id']
        self.cg_edges = []

        cg_edges = raw_yaml['call-graph-edges']
        if cg_edges is not None:
            for edge in cg_edges:
                self.cg_edges.append(RegionToFunctionEdge(edge))

        self.cf_edges = []
        cf_edges = raw_yaml['control-flow-edges']
        if cf_edges is not None:
            for edge in cf_edges:
                self.cf_edges.append(RegionToRegionEdge(edge))

        self.df_relations = []
        df_edges = raw_yaml['data-flow-relations']
        if df_edges is not None:
            for edge in df_edges:
                self.df_relations.append(RegionToRegionEdge(edge))

    def __str__(self):
        repr_str = "FName: {}:\n\t CG-Edges [".format(self.fname)
        sep = ""
        for cg_edge in self.cg_edges:
            repr_str += sep + str(cg_edge)
            sep = ", "
        repr_str += "]"

        repr_str += "\n\t CF-Edges ["
        sep = ""
        for cf_edge in self.cf_edges:
            repr_str += sep + str(cf_edge)
            sep = ", "
        repr_str += "]"

        return repr_str


class CommitReport(object):

    def __init__(self, path: str):
        with open(path, "r") as stream:
            self._path = path
            documents = yaml.load_all(stream)

            raw_infos = next(documents)
            self.finfos = dict()
            for raw_finfo in raw_infos['function-info']:
                finfo = FunctionInfo(raw_finfo)
                self.finfos[finfo.name] = finfo

            self.region_mappings = dict()
            for raw_r_mapping in raw_infos['region-mapping']:
                r_mapping = RegionMapping(raw_r_mapping)
                self.region_mappings[r_mapping.id] = r_mapping

            gedges = next(documents)
            self.graph_info = dict()
            # TODO: parse this into a full graph
            for raw_fg_edge in gedges:
                f_edge = FunctionGraphEdges(raw_fg_edge)
                self.graph_info[f_edge.fname] = f_edge

    def __str__(self):
        return "FInfo:\n\t{}\nRegionMappings:\n\t{}\n" \
            .format(self.finfos.keys(), self.region_mappings.keys())

    @property
    def path(self) -> str:
        """
        Path to CommitReport file.
        """
        return self._path


###############################################################################
# Connection Generators
###############################################################################

def generate_inout_cfg_cf(commit_report: CommitReport) -> pd.DataFrame:
    """
    Generates a pandas dataframe that contains the commit
    region control-flow interaction information.
    """
    cf_map = dict()  # RM -> [from, to]
    for reg_mapping in commit_report.region_mappings.values():
        cf_map[reg_mapping] = [0, 0]

    for func_g_edge in commit_report.graph_info.values():
        for cf_edge in func_g_edge.cf_edges:
            from_node = commit_report.region_mappings[cf_edge.edge_from]
            to_node = commit_report.region_mappings[cf_edge.edge_to]

            cf_map[from_node][0] += 1
            cf_map[to_node][1] += 1

    rows = []
    for item in cf_map.items():
        total = item[1][0] + item[1][1]
        rows.append([item[0].representation, item[1][0], "From", total])
        rows.append([item[0].representation, item[1][1], "To", total])

    rows.sort(key=lambda row: (-row[3], -row[1], row[2], row[0]))

    return pd.DataFrame(rows, columns=['Region', 'Amount',
                                       'Direction', 'TSort'])


def generate_inout_cfg_df(commit_report: CommitReport) -> pd.DataFrame:
    """
    Generates a pandas dataframe that contains the commit region
    data-flow interaction information.
    """
    df_map = dict()  # RM -> [from, to]
    for reg_mapping in commit_report.region_mappings.values():
        df_map[reg_mapping] = [0, 0]

    for func_g_edge in commit_report.graph_info.values():
        for df_edge in func_g_edge.df_relations:
            from_node = commit_report.region_mappings[df_edge.edge_from]
            to_node = commit_report.region_mappings[df_edge.edge_to]

            df_map[from_node][0] += 1
            df_map[to_node][1] += 1

    rows = []
    for item in df_map.items():
        total = item[1][0] + item[1][1]
        rows.append([item[0].representation, item[1][0], "From", total])
        rows.append([item[0].representation, item[1][1], "To", total])

    rows.sort(key=lambda row: (-row[3], -row[1], row[2], row[0]))

    return pd.DataFrame(rows, columns=['Region', 'Amount',
                                       'Direction', 'TSort'])
